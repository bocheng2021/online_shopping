package encrypt;

import myBean.BaseBean;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class MyCryptoTool extends BaseBean {
    private final String mySecreteIvStr = "6349712734217525";
    private final String mySecreteKey = "2c6a51ca6ca2sc51sac6";
    /**
     * Encrypts normal message into Cypher message.
     *
     * @ivStr A set of 16 numbers to create the initialization vector (IV).
     * @return The encrypted message in a byte array.
     */
    public byte[] encyptMessage(String message) {
        try {
            SecretKeySpec secretKey = getSecretKey(mySecreteKey);
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            IvParameterSpec ivParam = new IvParameterSpec(mySecreteIvStr.getBytes());

            cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivParam);
            System.out.println("Encrypt success!");
            return cipher.doFinal(message.getBytes());
            //return cipherMessage;
        } catch (Exception e) {
            System.out.println("Something went wrong!");
            return null;
        }

    }

    /**
     * Decrypts Cipher message into original message.
     * @return The original message in a String.
     */
    public String decryptMessage(byte[] cipherMessage) {
        
        try {
            SecretKeySpec secretKey = getSecretKey(mySecreteKey);
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            IvParameterSpec ivParam = new IvParameterSpec(mySecreteIvStr.getBytes());
            cipher.init(Cipher.DECRYPT_MODE, secretKey, ivParam);
            byte[] original = cipher.doFinal(cipherMessage);
            System.out.println("Decrypt success!");
            return new String(original);
        } catch (Exception ex) {
            return null;
        }
    }
    
    /**
     * Generates a secrete key based on users String key using a certain algorithm.
     *
     * @param stringKey Users Key in the form of Sring.
     * @return A secrete key generated by an algorithm based on the String Key.
     */
    private SecretKeySpec getSecretKey(String stringKey) throws Exception {
        byte[] arrayBytes = mySecreteKey.getBytes();
        byte[] arrayBytes16 = new byte[16]; // create 16 byte array

        for (int i = 0; i < arrayBytes.length && i < arrayBytes16.length; i++) {
            arrayBytes16[i] = arrayBytes[i];
        }

        return new SecretKeySpec(arrayBytes16, "AES");
    }
    
    /**
     * main method for testing the crypto functions.
     */
    public static void main(String[] args) {
        
        MyCryptoTool cryptoTool = new MyCryptoTool();

        //A sample message
        String message = "1CA1C56";
        
        //1) Encrypt the message into cypher
        byte[] myCypherMessage = cryptoTool.encyptMessage(message);
        System.out.println("[My Cypher Message:]\n" + new String(myCypherMessage));
        
        //2) Decrpt the cipher message back into normal message.
        String myOriginalMessage = cryptoTool.decryptMessage(myCypherMessage);
        System.out.println("[My Original Message:]\n" + myOriginalMessage);
    }
}
